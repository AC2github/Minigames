function JUKEBOX:IsValidSong( song )	for k, v in pairs( JUKEBOX.SONGS.New ) do		if v.ID == song then			return true		end	end		return falseendlocal playing = falsefunction JUKEBOX:GetDataFromSong( song )	for k, v in pairs( JUKEBOX.SONGS.New ) do		if v.ID == song then			return v		end	endendfunction JUKEBOX:PlaySong()	local song = JUKEBOX:GetDataFromSong(JUKEBOX.Cache[1])	if not song then return end		if playing == true then return end		if #JUKEBOX.Cache == 0 then		playing = true		return	end		if playing == false then				playing = true			PrintAll( "ADMIN", "Now playing: <color=red>"..song.Name.."</color>." )		for k, v in pairs( player.GetAll( ) ) do			umsg.Start( "jukebox_play", v )				umsg.String( song.Song )			umsg.End( )		end	end		timer.Simple( song.Time, function( )		table.remove( JUKEBOX.Cache, 1 )		playing = false		JUKEBOX:PlaySong( )	end)endfunction JUKEBOX:BuySong( pl, song )	if not ValidEntity( pl ) then return end	if JUKEBOX:IsValidSong( song ) == false then return end		if tonumber(pl:Money( )) < 100 then		pl:ChatPrint( "You can't afford that." )		return	end		if #JUKEBOX.Cache >= 6 then		pl:ChatPrint( "Jukebox cache is full." )		return	end		table.insert( JUKEBOX.Cache, song )		pl:TakeMoney( 100 )	pl:ChatPrint( "Song has been added." )		for k, v in pairs( JUKEBOX.SONGS ) do		if JUKEBOX.SONGS[k].ID == song then			PrintAll( "ADMIN", pl:Name( ).." has added <color=red>"..v.Name.."</color>." )		end	end		local song = JUKEBOX:GetDataFromSong(JUKEBOX.Cache[1])		JUKEBOX:PlaySong( )endconcommand.Add( "jukebox_buy", function( pl, cmd, args )	if not args[1] then return end		JUKEBOX:BuySong( pl, args[1] )end)